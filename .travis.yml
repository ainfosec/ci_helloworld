#
# CI Hello World
#
# Copyright (C) 2017 Assured Information Security, Inc.
# Author: Rian Quinn        <quinnr@ainfosec.com>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

#
# Configuration
#
language: cpp
dist: trusty

#
# Compilers
#
addons:
  apt:
    sources:
      - ubuntu-toolchain-r-test
      - llvm-toolchain-trusty-3.8
      - llvm-toolchain-trusty-3.9
      - llvm-toolchain-trusty-4.0
    packages:
      - clang-3.8
      - clang-3.9
      - clang-4.0
      - clang-tidy-4.0
      - gcc-5
      - g++-5
      - gcc-6
      - g++-6
      - doxygen
      - valgrind

#
# Update Build Environment
#
# Currently GCC and CMake are out of date. We require:
# - CMake 3.6+
#
before_install:

  #
  # CMake
  #
  - |
    if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
      wget https://cmake.org/files/v3.8/cmake-3.8.0-Linux-x86_64.sh
      chmod +x cmake-*-Linux-x86_64.sh
      ./cmake-*-Linux-x86_64.sh --exclude-subdir --skip-license
      export PATH="${TRAVIS_BUILD_DIR}/bin:$PATH"
      ls ${TRAVIS_BUILD_DIR}
      ls ${TRAVIS_BUILD_DIR}/bin
    else
      if ! brew ls --version cmake &>/dev/null; then brew install cmake; fi
    fi

#
# Build Dependencies
#
before_script:
  - mkdir build
  - cd build

#
# Build Matrix
#
matrix:
  include:


# Missing
#  - Coverity Scan
#  - CppCheck





  #
  # Doxygen
  #
  - os: linux
    env:
      - TEST="Doxygen"
    addons:
      apt:
        packages:
          - doxygen
    script:
      - cd ..
      - doxygen .doxygen.txt
      - |
        if [[ -s doxygen_warnings.txt ]]; then
          echo "You must fix doxygen before submitting a pull request"
          echo ""
          cat doxygen_warnings.txt
          exit -1
        fi

  #
  # Git Check
  #
  - os: linux
    env:
      - TEST="Git Check"
    script:
      - |
        if [[ -n $(git diff --check HEAD^) ]]; then
          echo "You must remove whitespace before submitting a pull request"
          echo ""
          git diff --check HEAD^
          exit -1
        fi

  #
  # Astyle Format
  #
  - os: linux
    env:
      - TEST="Astyle Format"
    addons:
      apt:
        sources:
          - ubuntu-toolchain-r-test
        packages:
          - gcc-6
          - g++-6
    script:
      - cmake -DCMAKE_CXX_COMPILER="g++-6" ..
      - make
      - make format
      - |
        if [[ -n $(git diff) ]]; then
          echo "You must run make format before submitting a pull request"
          echo ""
          git diff
          exit -1
        fi

  #
  # Clang Tidy
  #
  - os: linux
    env:
      - TEST="Clang Tidy"
    addons:
      apt:
        sources:
          - ubuntu-toolchain-r-test
          - llvm-toolchain-trusty-4.0
        packages:
          - clang-4.0
          - clang-tidy-4.0
          - gcc-6
          - g++-6
    script:
      - cmake -DCMAKE_CXX_COMPILER="g++-6" ..
      - make
      - make tidy > output.txt
      - |
        if [[ -n $(grep "warning: " output.txt) ]] || [[ -n $(grep "error: " output.txt) ]]; then
            echo "You must pass the clang tidy checks before submitting a pull request"
            echo ""
            grep --color -E '^|warning: |error: ' output.txt
            exit -1;
        else
            echo -e "\033[1;32m\xE2\x9C\x93 passed:\033[0m $1";
        fi
  #
  # Codecov
  #
  - os: linux
    env:
      - TEST="Codecov"
    addons:
      apt:
        sources:
          - ubuntu-toolchain-r-test
        packages:
          - gcc-6
          - g++-6
    script:
      - cmake -DENABLE_COVERAGE=ON -DCMAKE_CXX_COMPILER="g++-6" ..
      - make
      - make test
      - cd ..
      - bash <(curl -s https://codecov.io/bash)

  #
  # Coveralls
  #
  - os: linux
    env:
      - TEST="Coveralls"
    addons:
      apt:
        sources:
          - ubuntu-toolchain-r-test
        packages:
          - gcc-6
          - g++-6
    script:
      - pip install --user git+git://github.com/eddyxu/cpp-coveralls.git
      - cmake -DENABLE_COVERAGE=ON -DCMAKE_CXX_COMPILER="g++-6" ..
      - make
      - make test
      - cd ..
      - coveralls --build-root build --gcov-options '\-lp'

  #
  # Google Address Sanitizer
  #
  - os: linux
    addons:
      apt:
        sources:
          - ubuntu-toolchain-r-test
        packages:
          - gcc-6
          - g++-6
    env:
      - TEST="Google Address Sanitizer"
    script:
      - cmake -DENABLE_ASAN=ON -DCMAKE_CXX_COMPILER="g++-6" ..
      - make
      - make test

  #
  # Google Undefined Sanitizer
  #
  - os: linux
    env:
      - TEST="Google Undefined Sanitizer"
    addons:
      apt:
        sources:
          - ubuntu-toolchain-r-test
        packages:
          - gcc-6
          - g++-6
    script:
      - cmake -DENABLE_USAN=ON -DCMAKE_CXX_COMPILER="g++-6" ..
      - make
      - make test

  #
  # Valgrind
  #
  - os: linux
    env:
      - TEST="Valgrind"
    addons:
      apt:
        sources:
          - ubuntu-toolchain-r-test
        packages:
          - gcc-6
          - g++-6
          - valgrind
    script:
      - cmake -DCMAKE_CXX_COMPILER="g++-6" ..
      - make
      - ctest -T memCheck

  #
  # G++ 5
  #
  - os: linux
    env:
      - TEST="G++ 5"
    addons:
      apt:
        sources:
          - ubuntu-toolchain-r-test
        packages:
          - gcc-5
          - g++-5
    script:
      - cmake -DCMAKE_CXX_COMPILER="g++-5" ..
      - make
      - make test

  #
  # G++ 6
  #
  - os: linux
    env:
      - TEST="G++ 6"
    addons:
      apt:
        sources:
          - ubuntu-toolchain-r-test
        packages:
          - gcc-6
          - g++-6
    script:
      - cmake -DCMAKE_CXX_COMPILER="g++-6" ..
      - make
      - make test

  #
  # Clang 3.8
  #
  - os: linux
    env:
      - TEST="Clang 3.8"
    addons:
      apt:
        sources:
          - ubuntu-toolchain-r-test
          - llvm-toolchain-trusty-4.0
        packages:
          - clang-3.8
    script:
      - export CC=/usr/bin/clang-3.8
      - export CXX=/usr/bin/clang++-3.8
      - cmake ..
      - make
      - make test

  #
  # Clang 3.9
  #
  - os: linux
    env:
      - TEST="Clang 3.9"
    addons:
      apt:
        sources:
          - ubuntu-toolchain-r-test
          - llvm-toolchain-trusty-3.9
        packages:
          - clang-3.9
    script:
      - export CC=/usr/bin/clang-3.9
      - export CXX=/usr/bin/clang++-3.9
      - cmake ..
      - make
      - make test

  #
  # Clang 4.0
  #
  - os: linux
    env:
      - TEST="Clang 4.0"
    addons:
      apt:
        sources:
          - ubuntu-toolchain-r-test
          - llvm-toolchain-trusty-4.0
        packages:
          - clang-4.0
    script:
      - export CC=/usr/bin/clang-4.0
      - export CXX=/usr/bin/clang++-4.0
      - cmake ..
      - make
      - make test

  #
  # XCode 6.4
  #
  - os: osx
    env:
      - TEST="XCode 6.4"
    osx_image: xcode6.4
    script:
      - cmake ..
      - make
      - make test

  #
  # XCode 7.3
  #
  - os: osx
    env:
      - TEST="XCode 7.3"
    osx_image: xcode7.3
    script:
      - cmake ..
      - make
      - make test

  #
  # XCode 8
  #
  - os: osx
    env:
      - TEST="XCode 8"
    osx_image: xcode8
    script:
      - cmake ..
      - make
      - make test

  #
  # XCode 8.1
  #
  - os: osx
    env:
      - TEST="XCode 8.1"
    osx_image: xcode8.1
    script:
      - cmake ..
      - make
      - make test

  #
  # XCode 8.2
  #
  - os: osx
    env:
      - TEST="XCode 8.2"
    osx_image: xcode8.2
    script:
      - cmake ..
      - make
      - make test

  #
  # XCode 8.3
  #
  - os: osx
    env:
      - TEST="XCode 8.3"
    osx_image: xcode8.3
    script:
      - cmake ..
      - make
      - make test
